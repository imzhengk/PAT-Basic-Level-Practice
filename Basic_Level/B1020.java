package Basic_Level;
/*
1020 月饼 （25 分）
月饼是中国人在中秋佳节时吃的一种传统食品，不同地区有许多不同风味的月饼。
现给定所有种类月饼的库存量、总售价、以及市场的最大需求量，请你计算可以获得的最大收益是多少。
销售时允许取出一部分库存。假如我们有 3 种月饼，其库存量分别为 18、15、10 万吨，总售价分别为 75、72、45 亿元。
如果市场的最大需求量只有 20 万吨，那么我们最大收益策略应该是卖出全部 15 万吨第 2 种月饼、以及 5 万吨第 3 种月饼，获得 72 + 45/2 = 94.5（亿元）。
输入格式：
每个输入包含一个测试用例。
每个测试用例先给出一个不超过 1000 的正整数 N 表示月饼的种类数、以及不超过 500（以万吨为单位）的正整数 D 表示市场最大需求量。
随后一行给出 N 个正数表示每种月饼的库存量（以万吨为单位）；最后一行给出 N 个正数表示每种月饼的总售价（以亿元为单位）。
数字间以空格分隔。
输出格式：
对每组测试用例，在一行中输出最大收益，以亿元为单位并精确到小数点后 2 位。
 */
//运行超时
import java.util.Arrays;
import java.util.HashMap;
import java.util.Scanner;

public class B1020 {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int demand = sc.nextInt();
		HashMap map = new HashMap();
		int[][] total = new int[2][n];
		double[] unit = new double[n];
		for(int i=0;i<n;i++) {
			total[0][i] = sc.nextInt();//数量
		}
		for(int i=0;i<n;i++) {
			total[1][i] = sc.nextInt();//总价
		}
		for(int i=0;i<n;i++) {
			unit[i] = (double)total[1][i]/(double)total[0][i];//单价
			map.put(unit[i], i);
		}
		Arrays.sort(unit);
		int[] number = new int[n];
		int[] price = new int[n];
		for(int i=0;i<n;i++) {
			int temp = (int) map.get(unit[i]);
			number[i] = total[0][temp];
			price[i] = total[1][temp];
		}
		int sum = 0;
		double prices = 0;
		for(int i=n-1;i>=0;i--) {
			if(sum + number[i] < demand) {
				sum = sum + number[i];
				prices = prices + price[i];
			}
			else if(sum + number[i] >= demand) {
				int temp = demand - sum;
				prices = prices + unit[i]*(double)temp;
				break;
			}
		}
		System.out.printf("%.2f",prices);
	}
}
